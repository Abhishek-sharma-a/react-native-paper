"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6206],{5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),i=a(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>D});var n=a(7462),i=a(7294),r=a(6010),o=a(2466),l=a(6775),s=a(1980),m=a(7392),c=a(12);function h(e){return function(e){return i.Children.map(e,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:i}}=e;return{value:t,label:a,attributes:n,default:i}}))}function u(e){const{values:t,children:a}=e;return(0,i.useMemo)((()=>{const e=t??h(a);return function(e){const t=(0,m.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function p(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function d(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,r=u(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r}))),[s,m]=g({queryString:a,groupId:n}),[h,d]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,r]=(0,c.Nk)(a);return[n,(0,i.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:n}),v=(()=>{const e=s??h;return p({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{v&&l(v)}),[v]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),m(e),d(e)}),[m,d,r]),tabValues:r}}var v=a(2389);const k="tabList__CuJ",f="tabItem_LNqP";function b(e){let{className:t,block:a,selectedValue:l,selectValue:s,tabValues:m}=e;const c=[],{blockElementScrollPositionUntilNextRender:h}=(0,o.o5)(),u=e=>{const t=e.currentTarget,a=c.indexOf(t),n=m[a].value;n!==l&&(h(t),s(n))},p=e=>{var t;let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}null==(t=a)||t.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},t)},m.map((e=>{let{value:t,label:a,attributes:o}=e;return i.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:u},o,{className:(0,r.Z)("tabs__item",f,null==o?void 0:o.className,{"tabs__item--active":l===t})}),a??t)})))}function N(e){let{lazy:t,children:a,selectedValue:n}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===n));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function T(e){const t=d(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",k)},i.createElement(b,(0,n.Z)({},e,t)),i.createElement(N,(0,n.Z)({},e,t)))}function D(e){const t=(0,v.Z)();return i.createElement(T,(0,n.Z)({key:String(t)},e))}},7921:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>m,toc:()=>h});var n=a(7462),i=(a(7294),a(3905)),r=a(4866),o=a(5162);const l={title:"Theming with React Navigation"},s="Theming with React Navigation",m={unversionedId:"guides/theming-with-react-navigation",id:"guides/theming-with-react-navigation",title:"Theming with React Navigation",description:"In this guide we will look into how to apply theming for an application using React Native Paper and React Navigation at the same time.",source:"@site/docs/guides/08-theming-with-react-navigation.md",sourceDirName:"guides",slug:"/guides/theming-with-react-navigation",permalink:"/react-native-paper/docs/guides/theming-with-react-navigation",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/docs/docs/guides/08-theming-with-react-navigation.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Theming with React Navigation"},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/react-native-paper/docs/guides/contributing"},next:{title:"Integrate AppBar with react-navigation",permalink:"/react-native-paper/docs/guides/react-navigation"}},c={},h=[{value:"Themes adaptation",id:"themes-adaptation",level:2},{value:"Material Design 2",id:"material-design-2",level:3},{value:"Material Design 3",id:"material-design-3",level:3},{value:"Combining theme objects",id:"combining-theme-objects",level:2},{value:"Material Design 2",id:"material-design-2-1",level:3},{value:"Material Design 3",id:"material-design-3-1",level:3},{value:"Material Design 2",id:"material-design-2-2",level:3},{value:"Material Design 3",id:"material-design-3-2",level:3},{value:"Passing theme with Providers",id:"passing-theme-with-providers",level:2},{value:"Customizing theme",id:"customizing-theme",level:2},{value:"React Context for theme customization",id:"react-context-for-theme-customization",level:2},{value:"Creating Context",id:"creating-context",level:2},{value:"Using Context",id:"using-context",level:2}],u={toc:h};function p(e){let{components:t,...l}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"theming-with-react-navigation"},"Theming with React Navigation"),(0,i.kt)("p",null,"In this guide we will look into how to apply theming for an application using React Native Paper and React Navigation at the same time."),(0,i.kt)("p",null,"Offering different theme options, especially dark/light ones, becomes increasingly a standard requirement of the modern mobile application. Fortunately, both React Navigation and React Native Paper support configurable theming out-of-the-box.\nBut how to make them work together?"),(0,i.kt)("h2",{id:"themes-adaptation"},"Themes adaptation"),(0,i.kt)("h3",{id:"material-design-2"},"Material Design 2"),(0,i.kt)("p",null,"Fortunately, in Material Design 2, both React Navigation and React Native Paper offer very similar API when it comes to theming and theme color structure. It's possible to import them in light and dark variants from both."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\n\nimport {\n  MD2LightTheme,\n  MD2DarkTheme,\n} from 'react-native-paper';\n")),(0,i.kt)("h3",{id:"material-design-3"},"Material Design 3"),(0,i.kt)("p",null,"From v5, React Native Paper theme colors structure is following the Material Design 3 ",(0,i.kt)("i",null,"(known as Material You)")," colors system, which differs significantly from both previous Paper's theme and React Navigation theme. "),(0,i.kt)("p",null,"However, to simplify adapting React Navigation theme colors, to use the ones from React Native Paper, it's worth using a utility called ",(0,i.kt)("inlineCode",{parentName:"p"},"adaptNavigationTheme")," \u2013 it accepts navigation compliant themes in both modes and returns their equivalents adjusted to Material Design 3."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\n\nconst { LightTheme, DarkTheme } = adaptNavigationTheme({\n  light: NavigationDefaultTheme,\n  dark: NavigationDarkTheme,\n});\n")),(0,i.kt)("p",null,"Library exports also Material Design 3 themes in both modes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  MD3LightTheme,\n  MD3DarkTheme,\n} from 'react-native-paper';\n")),(0,i.kt)("h2",{id:"combining-theme-objects"},"Combining theme objects"),(0,i.kt)("p",null,"Both libraries require a wrapper to be used at the entry point of the application.\nReact Navigation exposes ",(0,i.kt)("inlineCode",{parentName:"p"},"NavigationContainer")," which ensures that navigation works correctly, but also accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"theme")," as an optional property. Read more about setting up navigation ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/getting-started/"},"here"),".\nFor React Native Paper theme to work, we need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"PaperProvider")," also at application's entry point."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native';\nimport {\n  Card,\n  Title,\n  Paragraph,\n  List,\n  Provider as PaperProvider,\n} from 'react-native-paper';\n\nconst Stack = createStackNavigator();\n\nconst HomeScreen = ({ navigation }) => (\n  <TouchableOpacity\n    onPress={() =>\n      navigation?.push('Details', {\n        title,\n        content,\n      })\n    }\n  >\n    <Card>\n      <Card.Content>\n        <Title>{title}</Title>\n        <Paragraph>{content}</Paragraph>\n      </Card.Content>\n    </Card>\n  </TouchableOpacity>\n);\n\nconst DetailsScreen = (props) => {\n  const { title, content } = props?.route?.params;\n  return (\n    <List.Section>\n      <List.Subheader>{title}</List.Subheader>\n      <List.Item title={content} />\n    </List.Section>\n  );\n};\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Details\" component={DetailsScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n")),(0,i.kt)("p",null,"Our goal here is to combine those two themes, so that we could control the theme for the entire application from a single place."),(0,i.kt)("p",null,"To make things easier we can use ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/deepmerge"},"deepmerge")," package. With ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn")," we can install it like this"),(0,i.kt)(r.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install deepmerge\n"))),(0,i.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add deepmerge\n")))),(0,i.kt)("h3",{id:"material-design-2-1"},"Material Design 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  NavigationContainer,\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  MD2DarkTheme,\n  MD2LightTheme,\n} from 'react-native-paper';\nimport merge from 'deepmerge';\n\nconst CombinedDefaultTheme = merge(MD2DarkTheme, NavigationDefaultTheme);\nconst CombinedDarkTheme = merge(MD2LightTheme, NavigationDarkTheme);\n")),(0,i.kt)("h3",{id:"material-design-3-1"},"Material Design 3"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  NavigationContainer,\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  MD3DarkTheme,\n  MD3LightTheme,\n} from 'react-native-paper';\nimport merge from 'deepmerge';\n\nconst { LightTheme, DarkTheme } = adaptNavigationTheme({\n  light: NavigationDefaultTheme,\n  dark: NavigationDarkTheme,\n});\n\nconst CombinedDefaultTheme = merge(MD3DarkTheme, LightTheme);\nconst CombinedDarkTheme = merge(MD3LightTheme, DarkTheme);\n")),(0,i.kt)("p",null,"Alternatively, we could merge those themes using vanilla JavaScript:"),(0,i.kt)("h3",{id:"material-design-2-2"},"Material Design 2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const CombinedDefaultTheme = {\n  ...MD2LightTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...MD2LightTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...MD2DarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...MD2DarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n")),(0,i.kt)("h3",{id:"material-design-3-2"},"Material Design 3"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const { LightTheme, DarkTheme } = adaptNavigationTheme({\n  light: NavigationDefaultTheme,\n  dark: NavigationDarkTheme,\n});\n\nconst CombinedDefaultTheme = {\n  ...MD3LightTheme,\n  ...LightTheme,\n  colors: {\n    ...MD3LightTheme.colors,\n    ...LightTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...MD3DarkTheme,\n  ...DarkTheme,\n  colors: {\n    ...MD3DarkTheme.colors,\n    ...DarkTheme.colors,\n  },\n};\n")),(0,i.kt)("h2",{id:"passing-theme-with-providers"},"Passing theme with Providers"),(0,i.kt)("p",null,"After combining the themes, we will be able to control theming in both libraries from a single source, which will come in handy later."),(0,i.kt)("p",null,"Next, we need to pass merged themes into the Providers. For this part, we use the dark one - ",(0,i.kt)("inlineCode",{parentName:"p"},"CombinedDarkTheme"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <PaperProvider theme={CombinedDarkTheme}>\n      <NavigationContainer theme={CombinedDarkTheme}>\n        <Stack.Navigator initialRouteName="Home">\n          <Stack.Screen name="Home" component={HomeScreen} />\n          <Stack.Screen name="Details" component={DetailsScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n')),(0,i.kt)("h2",{id:"customizing-theme"},"Customizing theme"),(0,i.kt)("p",null,"We don't need to limit ourselves to the themes offered by the libraries in default. Both packages allow for custom themes to be applied.\nYou can learn all about it their documentations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://reactnavigation.org/docs/themes/"},"Theming in React Navigation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-paper/theming.html"},"Theming in React Native Paper"))),(0,i.kt)("h2",{id:"react-context-for-theme-customization"},"React Context for theme customization"),(0,i.kt)("p",null,"Now, we wouldn't want to stay forever with dark theme being on, which is why we need to gain the ability to control theme dynamically. A bit of state management is needed for this purpose."),(0,i.kt)("p",null,"React Context proves itself very useful in handling cross-cutting concerns like global theme handling, so we will use just that."),(0,i.kt)("h2",{id:"creating-context"},"Creating Context"),(0,i.kt)("p",null,"First, we define our Context."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\n\nexport const PreferencesContext = React.createContext({\n  toggleTheme: () => {},\n  isThemeDark: false,\n});\n")),(0,i.kt)("h2",{id:"using-context"},"Using Context"),(0,i.kt)("p",null,"Context Provider should be imported also at the entry point, as we want it to wrap the whole app, for the theme values to be accessible at every component that we have."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import React from \'react\';\nimport { PreferencesContext } from \'./PreferencesContext\';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const [isThemeDark, setIsThemeDark] = React.useState(false);\n\n  let theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n\n  const toggleTheme = React.useCallback(() => {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n\n  const preferences = React.useMemo(\n    () => ({\n      toggleTheme,\n      isThemeDark,\n    }),\n    [toggleTheme, isThemeDark]\n  );\n\n  return (\n    // Context is wired into the local state of our main component, so that its values could be propagated throughout the entire application\n    <PreferencesContext.Provider value={preferences}>\n      <PaperProvider theme={theme}>\n        <NavigationContainer theme={theme}>\n          <Stack.Navigator initialRouteName="Home">\n            <Stack.Screen name="Home" component={HomeScreen} />\n            <Stack.Screen name="Details" component={DetailsScreen} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </PaperProvider>\n    </PreferencesContext.Provider>\n  );\n}\n')),(0,i.kt)("p",null,"Now that the Context is available at every component, all we need to do is import it. Next thing is to provide the user with some UI element to control changing the theme. We will use ",(0,i.kt)("inlineCode",{parentName:"p"},"Paper"),"'s ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/switch.html"},"Switch")," for this purpose."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport { useTheme, Appbar, TouchableRipple, Switch } from 'react-native-paper';\nimport { PreferencesContext } from './PreferencesContext';\n\nconst Header = ({ scene }) => {\n  const theme = useTheme();\n  const { toggleTheme, isThemeDark } = React.useContext(PreferencesContext);\n\n  return (\n    <Appbar.Header\n      theme={{\n        colors: {\n          primary: theme?.colors.surface,\n        },\n      }}\n    >\n      <Appbar.Content title={scene.route?.name} />\n        <Switch\n          color={'red'}\n          value={isThemeDark}\n          onValueChange={toggleTheme}\n        />\n    </Appbar.Header>\n  );\n};\n")),(0,i.kt)("p",null,"And now you can switch between light and dark theme!"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"paperGuide1",src:a(9158).Z,width:"405",height:"857"})),(0,i.kt)("p",null,"Thanks to the linking of themes that we did earlier, switching themes can be controlled with only one piece of state."),(0,i.kt)("p",null,"React Native Paper components will automatically use provided theme thanks to the ",(0,i.kt)("inlineCode",{parentName:"p"},"PaperProvider")," that is wrapped around the entry point of our application, but we can also access theme values manually with ",(0,i.kt)("inlineCode",{parentName:"p"},"useTheme")," hook,\nexposed by the library. You can see how it's done in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Header")," component code above."),(0,i.kt)("p",null,"If light/dark themes are not enough for your use case, you can learn more about creating Material Design themes ",(0,i.kt)("a",{parentName:"p",href:"https://material.io/design/material-theming/implementing-your-theme.html#color"},"here"),".\nOn ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," branch of the example app, you will find implemented ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/menu.html"},"Menu")," component, which allows to choose a few custom themes. Inspecting code in ",(0,i.kt)("inlineCode",{parentName:"p"},"utils")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Header")," may give you some idea how to use your own themes with ",(0,i.kt)("inlineCode",{parentName:"p"},"Paper"),", in addition to dedicated ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/menu.html"},"docs"),"."),(0,i.kt)("p",null,"Read more about integrating ",(0,i.kt)("inlineCode",{parentName:"p"},"Paper")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"React Navigation")," in a brilliant ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/blog/2020/01/29/using-react-navigation-5-with-react-native-paper/"},"article")," by ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/trensik"},"@trensik")))}p.isMDXComponent=!0},9158:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/themingWithReactNavigationDarkLightSwitch-e696c17bf7b8dbcc07deda37d069578e.gif"}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5655],{1446:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={title:"Integrate AppBar with react-navigation"},o="Integrate AppBar with react-navigation",s={unversionedId:"guides/react-navigation",id:"guides/react-navigation",title:"Integrate AppBar with react-navigation",description:"Prerequisites",source:"@site/docs/guides/9-react-navigation.md",sourceDirName:"guides",slug:"/guides/react-navigation",permalink:"/react-native-paper/docs/guides/react-navigation",draft:!1,editUrl:"https://github.com/callstack/react-native-paper/tree/main/docs/docs/guides/9-react-navigation.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Integrate AppBar with react-navigation"},sidebar:"tutorialSidebar",previous:{title:"Theming with React Navigation",permalink:"/react-native-paper/docs/guides/theming-with-react-navigation"},next:{title:"Introducing v5 with Material You",permalink:"/react-native-paper/docs/guides/migration-guide-to-5.0"}},p={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Stack Navigator",id:"stack-navigator",level:2},{value:"Adding AppBar",id:"adding-appbar",level:3}],l={toc:c};function d(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integrate-appbar-with-react-navigation"},"Integrate AppBar with react-navigation"),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"react-native-paper")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"react-navigation"))),(0,i.kt)("p",null,"We assume that you have already installed the mentioned libraries above, otherwise please check out the guides below."),(0,i.kt)("p",null," ",(0,i.kt)("a",{parentName:"p",href:"https://callstack.github.io/react-native-paper/docs/guides/getting-started"},"React Native Paper - Getting Started")),(0,i.kt)("p",null," ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/getting-started/"},"React Navigation - Getting Started")),(0,i.kt)("h2",{id:"stack-navigator"},"Stack Navigator"),(0,i.kt)("p",null,"We will start with ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation")," by creating a basic navigation stack. Stack navigator gives us a possibility of transition between screens in our app and manage navigation's history. In a simple scenario where there is only one stack navigator present in the app, it resembles a navigation state in a browser.\nScreens are pushed and popped from the stack while the user navigates to a new screen or go back to the previous one."),(0,i.kt)("p",null,"Let's create two screens. A main screen named ",(0,i.kt)("inlineCode",{parentName:"p"},"Home")," and details screen named ",(0,i.kt)("inlineCode",{parentName:"p"},"Details"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import 'react-native-gesture-handler';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n")),(0,i.kt)("p",null,"At the moment our navigation stack contains two screens and will render ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"DetailsScreen")," components according to the current navigation state. We have not implemented those components yet, so let's do this now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport {View, Text, Button, StyleSheet} from 'react-native';\n\nfunction HomeScreen() {\n  return (\n    <View style={style.container}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View style={style.container}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n")),(0,i.kt)("p",null,"Once we have finished implementing the components, we can run the app and check how Stack looks like."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"navigationAppBar1",src:t(3335).Z,width:"400",height:"711"})),(0,i.kt)("p",null,"To navigate from ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"DetailsScreen")," we can use the navigation object provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack.Screen")," component. Every component rendered by ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack.Screen")," has an access to the navigation object via props. Let's modify our ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"function HomeScreen({ navigation }) {\n  return (\n    <View style={style.container}>\n      <Text>Home Screen</Text>\n      <Button\n        title=\"Go to details\"\n        onPress={() => navigation.navigate('Details')}\n      />\n    </View>\n  );\n}\n")),(0,i.kt)("p",null,"Our result:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"navigationAppBar2",src:t(4023).Z,width:"400",height:"719"})),(0,i.kt)("p",null,"As you can see, we can already navigate between two screens. In the next steps, we will show you how to use Paper's ",(0,i.kt)("inlineCode",{parentName:"p"},"AppBar")," instead of the default header."),(0,i.kt)("h3",{id:"adding-appbar"},"Adding AppBar"),(0,i.kt)("p",null,"We can customize Stack's header by passing custom component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        initialRouteName="Home"\n        screenOptions={{\n          header: CustomNavigationBar,\n        }}>\n        <Stack.Screen name="Home" component={HomeScreen} />\n        <Stack.Screen name="Details" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n')),(0,i.kt)("p",null,"Now we will implement ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomNavigationBar")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"AppBar")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { Appbar } from 'react-native-paper';\n\nfunction CustomNavigationBar() {\n  return (\n    <Appbar.Header>\n      <Appbar.Content title=\"My awesome app\" />\n    </Appbar.Header>\n  );\n}\n")),(0,i.kt)("p",null,"Current implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomNavigationBar")," is simple - we just render a title inside of it. You may notice there is no way to go back to the previous screen, because the back button is not visible in the header. Let's add it now and let's make sure it's visible on all Stack's screens except ",(0,i.kt)("inlineCode",{parentName:"p"},"Home")," screen."),(0,i.kt)("p",null,"Firstly, pass navigation props to ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomNavigationBar"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'export default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        initialRouteName="Home"\n        screenOptions={{\n          header: (props) => <CustomNavigationBar {...props} />,\n        }}>\n        <Stack.Screen name="Home" component={HomeScreen} />\n        <Stack.Screen name="Details" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n')),(0,i.kt)("p",null,"Secondly, we check if the navigation bar receives a ",(0,i.kt)("inlineCode",{parentName:"p"},"back")," prop. If it has, it means there is another screen on the stack beneath the current screen and we should render the back arrow button in such a case. (The ",(0,i.kt)("inlineCode",{parentName:"p"},"back")," prop is sent in React Navigation 6.x; in 5.x a prop named ",(0,i.kt)("inlineCode",{parentName:"p"},"previous")," is sent and can be checked for instead.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'function CustomNavigationBar({ navigation, back }) {\n  return (\n    <Appbar.Header>\n      {back ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title="My awesome app" />\n    </Appbar.Header>\n  );\n}\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"navigationAppBar3",src:t(1680).Z,width:"400",height:"722"})),(0,i.kt)("p",null,"Another interesting pattern that can be implemented with ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation"),' is a "hamburger menu". Thanks to the ',(0,i.kt)("inlineCode",{parentName:"p"},"Menu")," component we can add a nice looking pop-up to our ",(0,i.kt)("inlineCode",{parentName:"p"},"Appbar"),". To implement this feature we need to make a couple of changes in ",(0,i.kt)("inlineCode",{parentName:"p"},"CustomNavigationBar"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Render a ",(0,i.kt)("inlineCode",{parentName:"li"},"Menu")," component"),(0,i.kt)("li",{parentName:"ul"},"Pass ",(0,i.kt)("inlineCode",{parentName:"li"},"Appbar.Action")," to the anchor prop"),(0,i.kt)("li",{parentName:"ul"},"Add a state to control ",(0,i.kt)("inlineCode",{parentName:"li"},"Menu")," visibility")),(0,i.kt)("p",null,"We also want the menu to appear only on ",(0,i.kt)("inlineCode",{parentName:"p"},"HomeScreen"),", which means we will render it conditionally based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"back")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'function CustomNavigationBar({ navigation, back }) {\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Appbar.Header>\n      {back ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title="My awesome app" />\n      {!back ? (\n        <Menu\n          visible={visible}\n          onDismiss={closeMenu}\n          anchor={\n            <Appbar.Action icon="menu" color="white" onPress={openMenu} />\n          }>\n          <Menu.Item onPress={() => {console.log(\'Option 1 was pressed\')}} title="Option 1" />\n          <Menu.Item onPress={() => {console.log(\'Option 2 was pressed\')}} title="Option 2" />\n          <Menu.Item onPress={() => {console.log(\'Option 3 was pressed\')}} title="Option 3" disabled />\n        </Menu>\n      ) : null}\n    </Appbar.Header>\n  );\n}\n')),(0,i.kt)("p",null,"Final result:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"navigationAppBar4",src:t(1384).Z,width:"400",height:"716"})),(0,i.kt)("p",null,"That's all we need! We have app bar that contains everything we need to navigate through screens and access an additional menu on the main screen. As you can see, with Material design ",(0,i.kt)("inlineCode",{parentName:"p"},"Appbar")," provided by ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-paper")," used together with ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation")," we can easily create an app that looks and works great."))}d.isMDXComponent=!0},3335:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-navigation-appBar1-8d2e3e227a1d371042beb57679fb50c5.png"},4023:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-navigation-appBar2-d68d531de5dae04b8ed52fedea32be6d.gif"},1680:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-navigation-appBar3-ef3066ff3735e283c4f63ec098a92d3f.gif"},1384:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/react-navigation-appBar4-a4f691d254c75ebb548a735386f39774.gif"}}]);